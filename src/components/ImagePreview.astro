---
/**
 * Componente para preview y acciones con la imagen generada
 */
---

<div class="card">
  <h2>🖼️ Vista Previa</h2>
  
  <div class="preview-container">
    <!-- Estado inicial -->
    <div id="previewEmpty" class="preview-empty">
      <img 
        src="/logos/logoZ5.png" 
        alt="Logo" 
        style="width: 150px; height: auto; opacity: 0.3; margin-bottom: 1rem;"
        onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
      />
      <div class="preview-empty-icon" style="display: none;">🚴‍♂️</div>
      <p>Completa el formulario y genera tu imagen</p>
    </div>

    <!-- Imagen generada -->
    <img 
      id="previewImage" 
      class="preview-image" 
      style="display: none;" 
      alt="Vista previa de la imagen generada"
    />

    <!-- Botones de acción -->
    <div id="actionButtons" class="btn-group" style="display: none;">
      <button id="downloadBtn" class="btn btn-primary">
        📥 Descargar
      </button>
      <button id="copyBtn" class="btn btn-secondary">
        📋 Copiar al Portapapeles
      </button>
    </div>
  </div>
</div>

<!-- Toast de notificación -->
<div id="toast" style="display: none;"></div>

<script>
  // Referencias a elementos
  const form = document.getElementById('bikeForm') as HTMLFormElement;
  const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
  const btnText = document.getElementById('btnText');
  const btnLoading = document.getElementById('btnLoading');
  const previewEmpty = document.getElementById('previewEmpty');
  const previewImage = document.getElementById('previewImage') as HTMLImageElement;
  const actionButtons = document.getElementById('actionButtons');
  const downloadBtn = document.getElementById('downloadBtn');
  const copyBtn = document.getElementById('copyBtn');
  const toast = document.getElementById('toast');

  let currentImageBlob: Blob | null = null;

  // Función para mostrar toast
  function showToast(message: string, type: 'success' | 'error' = 'success') {
    if (!toast) return;
    
    toast.className = `toast ${type}`;
    toast.textContent = message;
    toast.style.display = 'flex';

    setTimeout(() => {
      toast.style.display = 'none';
    }, 3000);
  }

  // Manejar submit del formulario
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!submitBtn || !btnText || !btnLoading) return;

    // Mostrar loading
    submitBtn.disabled = true;
    btnText.style.display = 'none';
    btnLoading.style.display = 'inline-block';

    try {
      // Obtener datos del formulario
      const formData = new FormData(form);
      const data: any = {};
      formData.forEach((value, key) => {
        if (value) data[key] = value;
      });

      // Llamar a la API
      const response = await fetch('/api/generate-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Error al generar la imagen');
      }

      // Obtener blob de la imagen
      currentImageBlob = await response.blob();
      const imageUrl = URL.createObjectURL(currentImageBlob);

      // Mostrar preview
      if (previewImage && previewEmpty && actionButtons) {
        previewImage.src = imageUrl;
        previewImage.style.display = 'block';
        previewEmpty.style.display = 'none';
        actionButtons.style.display = 'flex';
      }

      showToast('¡Imagen generada con éxito!', 'success');
    } catch (error) {
      console.error('Error:', error);
      showToast(error instanceof Error ? error.message : 'Error al generar la imagen', 'error');
    } finally {
      // Ocultar loading
      submitBtn.disabled = false;
      if (btnText && btnLoading) {
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
      }
    }
  });

  // Descargar imagen
  downloadBtn?.addEventListener('click', () => {
    if (!currentImageBlob) return;

    const url = URL.createObjectURL(currentImageBlob);
    const a = document.createElement('a');
    const formData = new FormData(form);
    const fecha = formData.get('fecha') || new Date().toISOString().split('T')[0];
    a.href = url;
    a.download = `salida-bici-${fecha}.png`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    showToast('Imagen descargada', 'success');
  });

  // Copiar al portapapeles
  copyBtn?.addEventListener('click', async () => {
    if (!currentImageBlob) return;

    try {
      // Verificar soporte de Clipboard API
      if (!navigator.clipboard || !window.ClipboardItem) {
        throw new Error('Tu navegador no soporta copiar imágenes al portapapeles');
      }

      // Copiar imagen
      const item = new ClipboardItem({ 'image/png': currentImageBlob });
      await navigator.clipboard.write([item]);

      showToast('¡Imagen copiada al portapapeles!', 'success');
    } catch (error) {
      console.error('Error al copiar:', error);
      showToast(
        error instanceof Error ? error.message : 'No se pudo copiar al portapapeles',
        'error'
      );
    }
  });
</script>
